<?php
// $Id$
/**
 * @file
 * Subversion backend for Version Control API - Provides Subversion commit
 * information and account management as a pluggable backend.
 *
 * Copyright 2006 by Karthik ("Zen", http://drupal.org/user/21209)
 * Copyright 2006, 2007 by Gavin Mogan ("halkeye", http://drupal.org/user/56779)
 * Copyright 2006, 2007 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implementation of hook_install().
 */
function versioncontrol_svn_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      db_query("CREATE TABLE {versioncontrol_svn_accounts} (
        uid int unsigned NOT NULL default 0,
        repo_id int unsigned NOT NULL default 0,
        password varchar(64) NOT NULL default '',
        serving_method tinyint NOT NULL default 0,
        PRIMARY KEY (uid, repo_id)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_svn_repositories} (
        repo_id int unsigned NOT NULL default 0,
        update_method tinyint unsigned NOT NULL default 0,
        updated int unsigned NOT NULL default 0,
        last_revision int unsigned NOT NULL default 0,
        auth_username varchar(128) NOT NULL default '',
        auth_password varchar(128) NOT NULL default '',
        path_trunk varchar(128) NOT NULL default '',
        path_branches varchar(128) NOT NULL default '',
        path_tags varchar(128) NOT NULL default '',
        allowed_serving_methods tinyint NOT NULL default 0,
        PRIMARY KEY (repo_id)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_svn_commit_actions} (
        vc_op_id int unsigned NOT NULL default 0,
        item_revision_id int unsigned NOT NULL default 0,
        action tinyint NOT NULL default 0,
        source_item_revision_id int unsigned NOT NULL default 0,
        replaced_item_revision_id int unsigned NOT NULL default 0,
        PRIMARY KEY (vc_op_id, item_revision_id)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");

      db_query("CREATE TABLE {versioncontrol_svn_item_revisions} (
        item_revision_id int unsigned NOT NULL default 0,
        repo_id int unsigned NOT NULL default 0,
        path varchar(255) NOT NULL default '',
        revision varchar(255) NOT NULL default '',
        type tinyint NOT NULL default 0,
        PRIMARY KEY (item_revision_id),
        KEY (repo_id, path),
        KEY (revision)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      break;

    case 'pgsql':
      db_query("CREATE TABLE {versioncontrol_svn_accounts} (
        uid int NOT NULL default 0,
        repo_id int NOT NULL default 0,
        password varchar(64) NOT NULL default '',
        serving_method smallint NOT NULL default 0,
        PRIMARY KEY (uid, repo_id)
      )");

      db_query("CREATE TABLE {versioncontrol_svn_repositories} (
        repo_id int NOT NULL default 0,
        update_method smallint NOT NULL default 0,
        updated int NOT NULL default 0,
        last_revision int NOT NULL default 0,
        auth_username varchar(128) NOT NULL default '',
        auth_password varchar(128) NOT NULL default '',
        path_trunk varchar(128) NOT NULL default '',
        path_branches varchar(128) NOT NULL default '',
        path_tags varchar(128) NOT NULL default '',
        allowed_serving_methods smallint NOT NULL default 0,
        PRIMARY KEY (repo_id)
      )");

      db_query("CREATE TABLE {versioncontrol_svn_commit_actions} (
        vc_op_id int NOT NULL default 0,
        item_revision_id int NOT NULL default 0,
        action smallint NOT NULL default 0,
        source_item_revision_id int NOT NULL default 0,
        replaced_item_revision_id int NOT NULL default 0,
        PRIMARY KEY (vc_op_id, item_revision_id)
      )");

      db_query("CREATE TABLE {versioncontrol_svn_item_revisions} (
        item_revision_id int NOT NULL default 0,
        repo_id int NOT NULL default 0,
        path varchar(255) NOT NULL default '',
        revision varchar(255) NOT NULL default '',
        type smallint NOT NULL default 0,
        PRIMARY KEY (item_revision_id)
      )");
      db_query("CREATE INDEX {versioncontrol_svn_item_revisions}_location_idx
                ON {versioncontrol_svn_item_revisions} (repo_id, path)");
      db_query("CREATE INDEX {versioncontrol_svn_item_revisions}_revision_idx
                ON {versioncontrol_svn_item_revisions} (revision)");
      break;
  }
}


/**
 * Implementation of hook_uninstall().
 */
function versioncontrol_svn_uninstall() {
  // Make sure we can access the required functions even from the .install file.
  include_once(drupal_get_path('module', 'versioncontrol') .'/versioncontrol.module');
  include_once(drupal_get_path('module', 'versioncontrol_svn') .'/versioncontrol_svn.module');

  if (db_table_exists('versioncontrol_repositories')) {
    $result = db_query("SELECT repo_id FROM {versioncontrol_repositories}
                        WHERE vcs = 'svn'");
    while ($repository = db_fetch_array($result)) {
      versioncontrol_delete_repository($repository);
    }
  }

  db_query('DROP TABLE {versioncontrol_svn_accounts}');
  db_query('DROP TABLE {versioncontrol_svn_repositories}');
  db_query('DROP TABLE {versioncontrol_svn_commit_actions}');
  db_query('DROP TABLE {versioncontrol_svn_item_revisions}');
}


// Update functions.

/**
 * Update 1: New authentication columns that hadn't been considered before.
 */
function versioncontrol_svn_update_1() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql("ALTER TABLE {versioncontrol_svn_repositories}
                           ADD COLUMN auth_username varchar(128) NOT NULL default ''
                           AFTER last_revision");
      $ret[] = update_sql("ALTER TABLE {versioncontrol_svn_repositories}
                           ADD COLUMN auth_password varchar(128) NOT NULL default ''
                           AFTER auth_username");
      break;
    case 'pgsql':
      $ret[] = update_sql("ALTER TABLE {versioncontrol_svn_repositories}
                           ADD COLUMN auth_username varchar(128) NOT NULL default ''");
      $ret[] = update_sql("ALTER TABLE {versioncontrol_svn_repositories}
                           ADD COLUMN auth_password varchar(128) NOT NULL default ''");
      break;
  }
  return $ret;
}

/**
 * Update 2: Version Control API now provides sane constants for item and
 *   action types - starting at 1 instead of 0. So, update the internal
 *   representation.
 */
function versioncontrol_svn_update_2() {
  $ret = array();
  $ret[] = update_sql('UPDATE {versioncontrol_svn_commit_actions}
                       SET action = action + 1');
  $ret[] = update_sql('UPDATE {versioncontrol_svn_item_revisions}
                       SET type = type + 1');
  return $ret;
}
